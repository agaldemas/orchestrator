FORMAT: 1A
HOST: *

# Orchestrator

Component to expose an API to automatise provisioning in all the IoT Platform modules.

# Group Orchestrator

All requests can be performed providing a 'x-auth-token' header instead of X_USER / X_PASSWORD payload fields


## Services query [/v1.0/service]
### List of Services [GET]

+ Request (application/json)

            {
                "DOMAIN_NAME":"default_admin_domain",
                "SERVICE_ADMIN_USER":"cloud_admin",
                "SERVICE_ADMIN_PASSWORD": "password",
            }

+ Response 200 (application/json)

    + Body

            {
                "domains": [
                    {
                        "enabled": true,
                        "id": "f7a5b8e303ec43e8a912fe26fa79dc02",
                        "name": "defaultservice",
                        "description": "defaultservice"
                    },
                    {
                        "enabled": true,
                        "id": "f7a5b8e303ec43e8a912fe26fa79dc03",
                        "name": "defaultservice2",
                        "description": "defaultservice2"
                    }
                ]
            }

### Create Service [POST]
+ Request (application/json)

            {
                "DOMAIN_NAME":"admin_domain",
                "DOMAIN_ADMIN_USER":"cloud_admin",
                "DOMAIN_ADMIN_PASSWORD": "password",
                "NEW_SERVICE_NAME":"defaultservice",
                "NEW_SERVICE_DESCRIPTION":"defaultservice desc",
                "NEW_SERVICE_ADMIN_USER":"adm1",
                "NEW_SERVICE_ADMIN_PASSWORD":"password",
                "NEW_SERVICE_ADMIN_EMAIL":"pepe@tid.es",
            }

       Required: ["NEW_SERVICE_NAME", "NEW_SERVICE_ADMIN_USER",  "NEW_SERVICE_ADMIN_PASSWORD"]

+ Response 201 (application/json)

    + Body

            {
             "id" : 0000
            }

## Service manager [/v1.0/service/{serviceId}]
### Get data [GET]
+ Parameters
    + serviceId (required, `string`) ... Service Id

+ Request (application/json)

            {
                "SERVICE_NAME":"defaultservice",
                "SERVICE_ADMIN_USER":"adm1",
                "SERVICE_ADMIN_PASSWORD":"password",
            }
+ Response 200 (application/json)

    + Body

            {
                "enabled": true,
                "id": "f7a5b8e303ec43e8a912fe26fa79dc02",
                "name": "defaultservice",
                "description": "defaultservice"
            }

## Sub-services in service [/v1.0/service/{serviceId}/subservice]
### List of subservices [GET]
+ Parameters
    + serviceId (required, `string`) ... Service Id


+ Response 200 (application/json)

    + Body

            {
              "projects": [
                {
                  "description": "defaultservice Subservicio Electricidad",
                  "id": "c6851f8ef57c4b91b567ab62ca3d0aea",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc02",
                  "name": "Electricidad"
                },
                {
                  "description": "defaultservice Subservicio Basuras",
                  "id": "c6851f8ef57c4b91b567ab62ca3d0aeb",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc03",
                  "name": "Basuras"
                },
                {
                  "description": "defaultservice Subservicio Jardines",
                  "id": "c6851f8ef57c4b91b567ab62ca3d0aec",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc04",
                  "name": "Jardines"
                }
              ]
            }

### Modify a subservice [PUT]

+ Request (application/json)

            {
                "SERVICE_NAME":"defaultservice",
                "SERVICE_ADMIN_USER":"adm1",
                "SERVICE_ADMIN_PASSWORD":"password",
                "SUBSERVICE_NAME":"Electricidad",
                "NEW_SUBSERVICE_DESCRIPTION":"electricidad new desc",
            }


+ Response 201 (application/json)

    + Body

            {
                   "id" : 0000
            }

### Create SubService [POST]
+ Parameters
    + serviceId (required, `string`) ... Service Id

+ Request (application/json)

            {
                "SERVICE_NAME":"defaultservice",
                "SERVICE_ADMIN_USER":"adm1",
                "SERVICE_ADMIN_PASSWORD":"password",
                "NEW_SUBSERVICE_NAME":"Electricidad",
                "NEW_SUBSERVICE_DESCRIPTION":"electricidad desc",
            }

       Required: ["NEW_SUBSERVICE_NAME" ]

+ Response 201 (application/json)

            {
                 "id" : 0000
            }

## Sub-service of service [/v1.0/service/{serviceId}/subservice/{subserviceId}]
### List of subservices [GET]
+ Response 200 (application/json)

    + Body

            {
                'description': 'electricidad',
                'domain_id': '06b9a460f5c343b3bc8b43f8533f7ab4',
                'id': '1119023a10064570a2a3de0b5b286500',
                'name': '/Electricidad'}
            }



## Register IoTA device in a Sub-service of service [/v1.0/service/{serviceId}/subservice/{subserviceId}/register_device/]
### register device in IoTA [POST]
+ Parameters
    + serviceId (required, `string`) ... Service
    + subserviceId (required, `string`) ... SubService

+ Request (application/json)

            {
                "SERVICE_NAME":"defaultservice",
                "SERVICE_USER_NAME":"adm1",
                "SERVICE_USER_PASSWORD":"password",
                "SUBSERVICE_NAME":"Electricidad",
                "DEVICE_ID":"buton_XXX",
                "ENTITY_TYPE":""BlackButton,
                "PROTOCOL":"TT_BLACKBUTTON",
                "ATT_CCID":"AAA",
                "ATT_IMEI":"123425345",
                "ATT_IMSI":"4535656777",
                "ATT_INTERACTION_TYPE":"asynchronous",
                "ATT_SERVICE_ID":"S-blackbutton",
                "ATT_GEOLOCATION":"40.4188,-36919",
            }

        Required: [ "DEVICE_ID", "ENTITY_TYPE", "PROTOCOL" ]


+ Response 201 (application/json)

            {
                 "registrationid" : "1234"
            }

### unregister device in IoTA [DELETE]
+ Parameters
    + serviceId (required, `string`) ... Service
    + subserviceId (required, `string`) ... SubService

+ Request (application/json)

            {
                "SERVICE_NAME":"defaultservice",
                "SERVICE_USER_NAME":"adm1",
                "SERVICE_USER_PASSWORD":"password",
                "SUBSERVICE_NAME":"Electricidad",
                "DEVICE_ID":"buton_XXX"
            }

        Required: [ "DEVICE_ID" ]


+ Response 204 (application/json)


## Register entity service for IOTA [/v1.0/service/{serviceId}/subservice/{subserviceId}/register_service/]
### Register entity service for IoTA [POST]
+ Parameters
    + serviceId (required, `string`) ... Service
    + subserviceId (required, `string`) ... SubService

+ Request (application/json)

            {
                "SERVICE_NAME":"defaultservice",
                "SERVICE_USER_NAME":"adm1",
                "SERVICE_USER_PASSWORD":"password",
                "SUBSERVICE_NAME":"Electricidad",
                "ENTITY_TYPE":"BlackButton",
                "ENTITY_ID":"buttonXXX",
                "PROTOCOL":"TT_BLACKBUTTON",
                "ATT_NAME":"blackbutton_telepizza",
                "ATT_PROVIDER":"telepizza",
                "ATT_ENDPOINT":"http://localhost:6500/sync/request",
                "ATT_METHOD":"POST",
                "ATT_AUTHENTICATION":"context-adapter",
                "ATT_INTERACTION_TYPE":"synchronous",
                "ATT_MAPPING":"[]",
                "ATT_TIMEOUT":"120",

            }

        Required: [ "ENTITY_ID", "ENTITY_TYPE", "PROTOCOL" ]

+ Response 201 (application/json)

            {
                 "subscriptionid" : "13234"
            }


## Roles in service [/v1.0/service/{serviceId}/role{?index}{?count}]
### List Roles[GET]
+ Parameters
    + serviceId (required, `string`) ... Service
    + index (optional, `number`) ... Start index for pagination
    + count (optional, `number`) ...  Number of results for pagination

+ Request (application/json)

        {
            "START_INDEX":"10",
            "COUNT":"10",
        }


+ Response 200 (application/json)

        {
            "roles": [
                {
                  "domain_id": "91d79dc2211d43a7985ebc27cdd146df",
                  "id": "c80481d244454cc7b796d4acf8625a69",
                  "name": "aRoleName"
                },
                {
                  "domain_id": "91d79dc2211d43a7985ebc27cdd146dg",
                  "id": "c80481d244454cc7b796d4acf8625a70",
                  "name": "aRoleName 2"
                },
                {
                  "domain_id": "91d79dc2211d43a7985ebc27cdd146dh",
                  "id": "c80481d244454cc7b796d4acf8625a71",
                  "name": "aRoleName 3"
                }

            ]
        }

### Create a Role[POST]
+ Request (application/json)

            {
                "SERVICE_NAME":"defaultservice",
                "SERVICE_ADMIN_USER":"adm1",
                "SERVICE_ADMIN_PASSWORD": "password",
                "NEW_ROLE_NAME":"role_NameBlabla"
            }


        Required: ["NEW_ROLE_NAME"]

+ Response 201 (application/json)

            {
                 "id" : 0000
            }

## Role in Service [/v1.0/service/{serviceId}/role/{roleId}]
### Delete a Role[DELETE]

+ Response 204

## Role assigment [/v1.0/service/{serviceId}/role_assignments{?user_id,subservice_id,role_id,effective,inherit}]
### List of assignment roles [GET]
+ Parameters
    + service_id (required, `string`) ... Domain
    + user_id (optional, `string`) ... User
    + subservice_id (optional, `string`) ... Subservice (aka Project)
    + role_id (optional, `string`) ... Role
    + effective (optional, `boolean`) ... effective
    + inherit (optional, `boolean`) ... all inherit roles

+ Response 200 (application/json)

        {
          "role_assignments": [
            {
              "scope": {
                "domain": {
                  "id": "16966e6fdac74225afb4edf801dd9b2a"
                }
              },
              "role": {
                "id": "0993967f1ea24a82a72ca4198c16ca20",
                "name": "ServiceCustomer",
                "domain_id": "16966e6fdac74225afb4edf801dd9b2a"
              },
              "user": {
                "description": "user of domain defaultservice",
                "name": "Carl",
                "enabled": true,
                "id": "7ee5a828843945a79026d99ae0057bb9",
                "domain_id": "16966e6fdac74225afb4edf801dd9b2a"
              },
              "links": {
                "assignment": "http://localhost:5001/v3/domains/16966e6fdac74225afb4edf801dd9b2a/users/7ee5a828843945a79026d99ae0057bb9/roles/0993967f1ea24a82a72ca4198c16ca20"
              }
            },
            {
              "scope": {
                "domain": {
                  "id": "16966e6fdac74225afb4edf801dd9b2a"
                }
              },
              "role": {
                "id": "0b597039040b4c31b8a13dfe1180c9ff",
                "name": "admin"
              },
              "user": {
                "description": "Administrator of domain defaultservice",
                "name": "adm1",
                "enabled": true,
                "id": "a5c624a8402b48c3931d4600a7fe2be9",
                "domain_id": "16966e6fdac74225afb4edf801dd9b2a"
              },
              "links": {
                "assignment": "http://localhost:5001/v3/domains/16966e6fdac74225afb4edf801dd9b2a/users/a5c624a8402b48c3931d4600a7fe2be9/roles/0b597039040b4c31b8a13dfe1180c9ff"
              }
            }
          ]
        }

### Assign role to user [POST]
+ Parameters
    + service_id (required, `string`) ... Domain

+ Request (application/json)

        {
            "SUBSERVICE_NAME":"Electricidad",
            "SUBSERVICE_ID":"234234234234",
            "SERVICE_ADMIN_USER":"adm1",
            "SERVICE_ADMIN_PASSWORD": "password",
            "SERVICE_ADMIN_TOKEN": "token",
            "ROLE_NAME":"ServiceCustomer",
            "ROLE_ID":"sadfasdfasdfas",
            "SERVICE_USER_NAME":"user_nameX",
            "SERVICE_USER_ID":"asdfasdf",
            "INHERIT":true
        }

        Required: ["ROLE_NAME", "SERVICE_USER_NAME"]


+ Response 201


### rovocar rol a usuario [DELETE]
+ Parameters
    + service_id (required, `string`) ... Domain

+ Request (application/json)

        {
            "SUBSERVICE_NAME":"Electricidad",
            "SUBSERVICE_ID":"234234234234",
            "SERVICE_ADMIN_USER":"adm1",
            "SERVICE_ADMIN_PASSWORD": "password",
            "SERVICE_ADMIN_TOKEN": "token",
            "ROLE_NAME":"ServiceCustomer",
            "ROLE_ID":"sadfasdfasdfas",
            "SERVICE_USER_NAME":"user_nameX",
            "SERVICE_USER_ID":"asdfasdf",
            "INHERIT":true
        }

+ Response 204


## Users in Service [/v1.0/service/{serviceId}/user{?index}{?count}]
### Users list [GET]
+ Parameters
    + serviceId (required, `string`) ... Service Id
    + index (optional, `number`) ... Start index for pagination
    + count (optional, `number`) ...  Number of results for pagination

+ Request (application/json)

        {
            "START_INDEX":"10",
            "COUNT":"10",
        }

+ Response 200 (application/json)

        {
            "users" : [
                {
                  "description": "Administrator of domain dom1",
                  "name": "adm1",
                  "enabled": true,
                  "id": "8ac8aa6470c64b5083a6778fc2cd7828",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc02"
                },
                {
                  "description": "Alice",
                  "name": "alice",
                  "enabled": true,
                  "id": "5e817c5e0d624ee68dfb7a72d0d31ce4",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc02"
                },
                {
                  "description": "Bob",
                  "name": "bob",
                  "enabled": true,
                  "id": "5e817c5e0d624ee68dfb7a72d0d31ce4",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc02"
                },
                {
                  "description": "Alice2",
                  "name": "alice",
                  "enabled": true,
                  "id": "5e817c5e0d624ee68dfb7a72d0d31ce4",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc02"
                }
            ]
        }

### Create Users [POST]

+ Request (application/json)

        {
            "NEW_SERVICE_USER_NAME":"user_name_new",
            "NEW_SERVICE_USER_PASSWORD":"password",
            "NEW_SERVICE_USER_EMAIL":"email@email.com",
            "NEW_SERVICE_USER_DESCRIPTION":"user description"
        }

+ Response 201 (application/json)

        {
            "id": 00000
        }


## User in Service [/v1.0/service/{serviceId}/user/{userId}]
### detail of user[GET]
+ Parameters
    + userId (required, `string`) ... User
    + serviceId (required, `string`) ... Service

+ Response 200 (application/json)

        {
          "userName": "alice",
          "urn:scim:schemas:extension:keystone:1.0": {
            "domain_id": "91d79dc2211d43a7985ebc27cdd146df"
          },
          "emails": [
            {
              "value": "alice@mailhost.com"
            }
          ],
          "active": true,
          "id": "a5e8c847f7264c5a9f01a22904e3ae93",
          "schemas": [
            "urn:scim:schemas:core:1.0",
            "urn:scim:schemas:extension:keystone:1.0"
          ]
        }

### update an user (by his admin) [PUT]

+ Request (application/json)

        {
             "USER_DATA_VALUE": { "emails": [ {"value": "test@gmail.com"}],
                                  "name": "new name user",
                                  "description": "new description user",
                                  "password": "new description password"
             }
        }

+ Response 200

### change user password by himself [POST]

+ Request (application/json)

        {
             "SERVICE_USER_PASSWORD": "old_password",
             "NEW_USER_PASSWORD": "new_password"
        }

+ Response 200

### delete an user[DELETE]

+ Response 204

## Trust Token [/orc/service/{serviceId}/trust]

### Create Trust Token [POST]

+ Request (application/json)

        {
            "SUBSERVICE_NAME":"Electricidad",
            "SUBSERVICE_ID":"234234234234",
            "SERVICE_ADMIN_USER":"adm1",
            "SERVICE_ADMIN_PASSWORD": "password",
            "ROLE_NAME":"ServiceCustomer",
            "ROLE_ID":"SDFG930J34534K5",
            "TRUSTEE_USER_NAME":"iotagent",
            "TRUSTEE_USER_ID":"345635ASDFASD6347",
            "TRUSTOR_USER_NAME":"adm1",
            "TRUSTOR_USER_ID":"45674ASDFASDF5674567",
        }

+ Response 201 (application/json)

        {
            "ID_TRUST": "147562fcd773448aac3dd53748a43b0c"
        }
